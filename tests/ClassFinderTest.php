<?php

declare(strict_types=1);

namespace Gooyer\ClassFinder\Tests;

use Composer\Autoload\ClassLoader;
use Gooyer\ClassFinder\ApplyFilters;
use Gooyer\ClassFinder\ClassFinder;
use Gooyer\ClassFinder\ClassFinderInterface;
use Gooyer\ClassFinder\Exceptions\NamespaceRequiredException;
use Gooyer\ClassFinder\Filter;

class ClassFinderTest extends \PHPUnit\Framework\TestCase
{
    /**
     * @var ClassLoader
     */
    private $classLoader;


    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->classLoader = require(realpath(__DIR__ . "/../vendor/autoload.php"));
    }

    public function testInstance()
    {
        $clsFinder = new ClassFinder($this->classLoader);
        $this->assertInstanceOf(ClassFinderInterface::class, $clsFinder);

    }

    public function testExceptionThrow()
    {
        $instance = new ClassFinder($this->classLoader);
        $this->expectException(NamespaceRequiredException::class);
        $instance->implements(Filter::class)->search();
    }

    public function testFindClassFinder()
    {
        $interfaces = [ClassFinderInterface::class];
        $instance = new ClassFinder($this->classLoader);
        $results = $instance->namespace("Gooyer\\ClassFinder")->implements($interfaces)->search();
        $this->assertIsArray($results);
        $this->assertTrue(count($results) > 0);
        foreach ($results as $result) {
            $classRef = new \ReflectionClass($result);
            $classInterfaces = $classRef->getInterfaceNames();
            foreach ($interfaces as $interface) {
                $this->assertTrue(in_array($interface, $classInterfaces));
            }
        }
    }

}